// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raftcluster_auth.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SessionDestroyRsp struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionDestroyRsp) Reset()         { *m = SessionDestroyRsp{} }
func (m *SessionDestroyRsp) String() string { return proto.CompactTextString(m) }
func (*SessionDestroyRsp) ProtoMessage()    {}
func (*SessionDestroyRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f3e7c79f67e3aaf, []int{0}
}

func (m *SessionDestroyRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionDestroyRsp.Unmarshal(m, b)
}
func (m *SessionDestroyRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionDestroyRsp.Marshal(b, m, deterministic)
}
func (m *SessionDestroyRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionDestroyRsp.Merge(m, src)
}
func (m *SessionDestroyRsp) XXX_Size() int {
	return xxx_messageInfo_SessionDestroyRsp.Size(m)
}
func (m *SessionDestroyRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionDestroyRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SessionDestroyRsp proto.InternalMessageInfo

func (m *SessionDestroyRsp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type SessionDeleteKeyReq struct {
	Sid                  string   `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionDeleteKeyReq) Reset()         { *m = SessionDeleteKeyReq{} }
func (m *SessionDeleteKeyReq) String() string { return proto.CompactTextString(m) }
func (*SessionDeleteKeyReq) ProtoMessage()    {}
func (*SessionDeleteKeyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f3e7c79f67e3aaf, []int{1}
}

func (m *SessionDeleteKeyReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionDeleteKeyReq.Unmarshal(m, b)
}
func (m *SessionDeleteKeyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionDeleteKeyReq.Marshal(b, m, deterministic)
}
func (m *SessionDeleteKeyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionDeleteKeyReq.Merge(m, src)
}
func (m *SessionDeleteKeyReq) XXX_Size() int {
	return xxx_messageInfo_SessionDeleteKeyReq.Size(m)
}
func (m *SessionDeleteKeyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionDeleteKeyReq.DiscardUnknown(m)
}

var xxx_messageInfo_SessionDeleteKeyReq proto.InternalMessageInfo

func (m *SessionDeleteKeyReq) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *SessionDeleteKeyReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type SessionDeleteKeyRsp struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionDeleteKeyRsp) Reset()         { *m = SessionDeleteKeyRsp{} }
func (m *SessionDeleteKeyRsp) String() string { return proto.CompactTextString(m) }
func (*SessionDeleteKeyRsp) ProtoMessage()    {}
func (*SessionDeleteKeyRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f3e7c79f67e3aaf, []int{2}
}

func (m *SessionDeleteKeyRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionDeleteKeyRsp.Unmarshal(m, b)
}
func (m *SessionDeleteKeyRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionDeleteKeyRsp.Marshal(b, m, deterministic)
}
func (m *SessionDeleteKeyRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionDeleteKeyRsp.Merge(m, src)
}
func (m *SessionDeleteKeyRsp) XXX_Size() int {
	return xxx_messageInfo_SessionDeleteKeyRsp.Size(m)
}
func (m *SessionDeleteKeyRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionDeleteKeyRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SessionDeleteKeyRsp proto.InternalMessageInfo

func (m *SessionDeleteKeyRsp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type SessionGetReq struct {
	Sid                  string   `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionGetReq) Reset()         { *m = SessionGetReq{} }
func (m *SessionGetReq) String() string { return proto.CompactTextString(m) }
func (*SessionGetReq) ProtoMessage()    {}
func (*SessionGetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f3e7c79f67e3aaf, []int{3}
}

func (m *SessionGetReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionGetReq.Unmarshal(m, b)
}
func (m *SessionGetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionGetReq.Marshal(b, m, deterministic)
}
func (m *SessionGetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionGetReq.Merge(m, src)
}
func (m *SessionGetReq) XXX_Size() int {
	return xxx_messageInfo_SessionGetReq.Size(m)
}
func (m *SessionGetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionGetReq.DiscardUnknown(m)
}

var xxx_messageInfo_SessionGetReq proto.InternalMessageInfo

func (m *SessionGetReq) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *SessionGetReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type SessionGetRsp struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionGetRsp) Reset()         { *m = SessionGetRsp{} }
func (m *SessionGetRsp) String() string { return proto.CompactTextString(m) }
func (*SessionGetRsp) ProtoMessage()    {}
func (*SessionGetRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f3e7c79f67e3aaf, []int{4}
}

func (m *SessionGetRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionGetRsp.Unmarshal(m, b)
}
func (m *SessionGetRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionGetRsp.Marshal(b, m, deterministic)
}
func (m *SessionGetRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionGetRsp.Merge(m, src)
}
func (m *SessionGetRsp) XXX_Size() int {
	return xxx_messageInfo_SessionGetRsp.Size(m)
}
func (m *SessionGetRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionGetRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SessionGetRsp proto.InternalMessageInfo

func (m *SessionGetRsp) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SessionSetReq struct {
	Sid                  string   `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionSetReq) Reset()         { *m = SessionSetReq{} }
func (m *SessionSetReq) String() string { return proto.CompactTextString(m) }
func (*SessionSetReq) ProtoMessage()    {}
func (*SessionSetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f3e7c79f67e3aaf, []int{5}
}

func (m *SessionSetReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionSetReq.Unmarshal(m, b)
}
func (m *SessionSetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionSetReq.Marshal(b, m, deterministic)
}
func (m *SessionSetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionSetReq.Merge(m, src)
}
func (m *SessionSetReq) XXX_Size() int {
	return xxx_messageInfo_SessionSetReq.Size(m)
}
func (m *SessionSetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionSetReq.DiscardUnknown(m)
}

var xxx_messageInfo_SessionSetReq proto.InternalMessageInfo

func (m *SessionSetReq) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *SessionSetReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SessionSetReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SessionSetRsp struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionSetRsp) Reset()         { *m = SessionSetRsp{} }
func (m *SessionSetRsp) String() string { return proto.CompactTextString(m) }
func (*SessionSetRsp) ProtoMessage()    {}
func (*SessionSetRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f3e7c79f67e3aaf, []int{6}
}

func (m *SessionSetRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionSetRsp.Unmarshal(m, b)
}
func (m *SessionSetRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionSetRsp.Marshal(b, m, deterministic)
}
func (m *SessionSetRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionSetRsp.Merge(m, src)
}
func (m *SessionSetRsp) XXX_Size() int {
	return xxx_messageInfo_SessionSetRsp.Size(m)
}
func (m *SessionSetRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionSetRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SessionSetRsp proto.InternalMessageInfo

func (m *SessionSetRsp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type RequestWithSID struct {
	Sid                  string   `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestWithSID) Reset()         { *m = RequestWithSID{} }
func (m *RequestWithSID) String() string { return proto.CompactTextString(m) }
func (*RequestWithSID) ProtoMessage()    {}
func (*RequestWithSID) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f3e7c79f67e3aaf, []int{7}
}

func (m *RequestWithSID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestWithSID.Unmarshal(m, b)
}
func (m *RequestWithSID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestWithSID.Marshal(b, m, deterministic)
}
func (m *RequestWithSID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestWithSID.Merge(m, src)
}
func (m *RequestWithSID) XXX_Size() int {
	return xxx_messageInfo_RequestWithSID.Size(m)
}
func (m *RequestWithSID) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestWithSID.DiscardUnknown(m)
}

var xxx_messageInfo_RequestWithSID proto.InternalMessageInfo

func (m *RequestWithSID) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

type SessionInitRsp struct {
	Sid                  string   `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionInitRsp) Reset()         { *m = SessionInitRsp{} }
func (m *SessionInitRsp) String() string { return proto.CompactTextString(m) }
func (*SessionInitRsp) ProtoMessage()    {}
func (*SessionInitRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f3e7c79f67e3aaf, []int{8}
}

func (m *SessionInitRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionInitRsp.Unmarshal(m, b)
}
func (m *SessionInitRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionInitRsp.Marshal(b, m, deterministic)
}
func (m *SessionInitRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionInitRsp.Merge(m, src)
}
func (m *SessionInitRsp) XXX_Size() int {
	return xxx_messageInfo_SessionInitRsp.Size(m)
}
func (m *SessionInitRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionInitRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SessionInitRsp proto.InternalMessageInfo

func (m *SessionInitRsp) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func init() {
	proto.RegisterType((*SessionDestroyRsp)(nil), "pb.SessionDestroyRsp")
	proto.RegisterType((*SessionDeleteKeyReq)(nil), "pb.SessionDeleteKeyReq")
	proto.RegisterType((*SessionDeleteKeyRsp)(nil), "pb.SessionDeleteKeyRsp")
	proto.RegisterType((*SessionGetReq)(nil), "pb.SessionGetReq")
	proto.RegisterType((*SessionGetRsp)(nil), "pb.SessionGetRsp")
	proto.RegisterType((*SessionSetReq)(nil), "pb.SessionSetReq")
	proto.RegisterType((*SessionSetRsp)(nil), "pb.SessionSetRsp")
	proto.RegisterType((*RequestWithSID)(nil), "pb.RequestWithSID")
	proto.RegisterType((*SessionInitRsp)(nil), "pb.SessionInitRsp")
}

func init() {
	proto.RegisterFile("raftcluster_auth.proto", fileDescriptor_1f3e7c79f67e3aaf)
}

var fileDescriptor_1f3e7c79f67e3aaf = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4d, 0x4f, 0x83, 0x40,
	0x10, 0x86, 0x53, 0xaa, 0x46, 0xc7, 0xd8, 0xb4, 0xeb, 0x57, 0xd3, 0x8b, 0x06, 0x63, 0xe2, 0x89,
	0x43, 0x1b, 0x0f, 0xc6, 0x2b, 0x09, 0x21, 0xde, 0x96, 0x83, 0x47, 0x03, 0x3a, 0x4d, 0x09, 0xa4,
	0xbb, 0x65, 0x07, 0x13, 0xfe, 0x91, 0x3f, 0xd3, 0xf0, 0x11, 0x58, 0x60, 0x0f, 0xbd, 0xc1, 0xf0,
	0x3e, 0xcf, 0xb0, 0x3b, 0x03, 0x77, 0x59, 0xb8, 0xa5, 0xef, 0x34, 0x57, 0x84, 0xd9, 0x57, 0x98,
	0xd3, 0xce, 0x91, 0x99, 0x20, 0xc1, 0x2c, 0x19, 0xd9, 0x4f, 0xb0, 0x08, 0x50, 0xa9, 0x58, 0xec,
	0x5d, 0x54, 0x94, 0x89, 0x82, 0x2b, 0xc9, 0x66, 0x60, 0x89, 0x64, 0x39, 0x79, 0x9c, 0xbc, 0x9c,
	0x73, 0x4b, 0x24, 0xf6, 0x1b, 0x5c, 0xb7, 0xa1, 0x14, 0x09, 0x3f, 0xb0, 0xe0, 0x78, 0x60, 0x73,
	0x98, 0xaa, 0xf8, 0xa7, 0xca, 0x5d, 0xf0, 0xf2, 0xb1, 0xac, 0x24, 0x58, 0x2c, 0xad, 0xba, 0x92,
	0x60, 0x61, 0x3f, 0x1b, 0x50, 0x43, 0x87, 0x0d, 0x5c, 0x35, 0x31, 0x0f, 0xe9, 0x78, 0xb7, 0x0e,
	0x29, 0xc9, 0x6e, 0xe0, 0xf4, 0x37, 0x4c, 0x73, 0x6c, 0xb0, 0xfa, 0xc5, 0xf6, 0xdb, 0x58, 0x70,
	0xb4, 0xbb, 0x53, 0x4d, 0x75, 0xd5, 0x43, 0x4f, 0x65, 0x38, 0x87, 0x0d, 0x33, 0x8e, 0x87, 0x1c,
	0x15, 0x7d, 0xc6, 0xb4, 0x0b, 0x7c, 0x77, 0xdc, 0xac, 0xcc, 0x34, 0x12, 0x7f, 0x1f, 0x57, 0x96,
	0x51, 0x66, 0xfd, 0x67, 0xc1, 0x09, 0x0f, 0xb7, 0xc4, 0x5e, 0xe1, 0x52, 0x0b, 0x33, 0xe6, 0xc8,
	0xc8, 0xe9, 0x77, 0x58, 0x55, 0xb5, 0x81, 0xf1, 0xbd, 0xed, 0xd1, 0x8c, 0xd5, 0x48, 0xde, 0x6a,
	0xa4, 0x36, 0xfe, 0x35, 0x40, 0x77, 0x4a, 0xb6, 0xd0, 0x42, 0xf5, 0x05, 0xae, 0x86, 0xa5, 0x1e,
	0xe3, 0x0d, 0x18, 0x6f, 0xcc, 0x34, 0xe3, 0x72, 0x61, 0x3e, 0xdc, 0x0d, 0x76, 0xdf, 0xfb, 0xa5,
	0x6e, 0xd9, 0x56, 0xe6, 0x0f, 0x4a, 0x46, 0x67, 0xd5, 0x32, 0x6f, 0xfe, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xf6, 0xf2, 0xa4, 0x91, 0xe6, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftClient interface {
	SessionInit(ctx context.Context, in *RequestWithSID, opts ...grpc.CallOption) (*SessionInitRsp, error)
	SessionDestroy(ctx context.Context, in *RequestWithSID, opts ...grpc.CallOption) (*SessionDestroyRsp, error)
	SessionSet(ctx context.Context, in *SessionSetReq, opts ...grpc.CallOption) (*SessionSetRsp, error)
	SessionGet(ctx context.Context, in *SessionGetReq, opts ...grpc.CallOption) (*SessionGetRsp, error)
	SessionDeleteKey(ctx context.Context, in *SessionDeleteKeyReq, opts ...grpc.CallOption) (*SessionDeleteKeyRsp, error)
}

type raftClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftClient(cc grpc.ClientConnInterface) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) SessionInit(ctx context.Context, in *RequestWithSID, opts ...grpc.CallOption) (*SessionInitRsp, error) {
	out := new(SessionInitRsp)
	err := c.cc.Invoke(ctx, "/pb.Raft/SessionInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) SessionDestroy(ctx context.Context, in *RequestWithSID, opts ...grpc.CallOption) (*SessionDestroyRsp, error) {
	out := new(SessionDestroyRsp)
	err := c.cc.Invoke(ctx, "/pb.Raft/SessionDestroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) SessionSet(ctx context.Context, in *SessionSetReq, opts ...grpc.CallOption) (*SessionSetRsp, error) {
	out := new(SessionSetRsp)
	err := c.cc.Invoke(ctx, "/pb.Raft/SessionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) SessionGet(ctx context.Context, in *SessionGetReq, opts ...grpc.CallOption) (*SessionGetRsp, error) {
	out := new(SessionGetRsp)
	err := c.cc.Invoke(ctx, "/pb.Raft/SessionGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) SessionDeleteKey(ctx context.Context, in *SessionDeleteKeyReq, opts ...grpc.CallOption) (*SessionDeleteKeyRsp, error) {
	out := new(SessionDeleteKeyRsp)
	err := c.cc.Invoke(ctx, "/pb.Raft/SessionDeleteKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServer is the server API for Raft service.
type RaftServer interface {
	SessionInit(context.Context, *RequestWithSID) (*SessionInitRsp, error)
	SessionDestroy(context.Context, *RequestWithSID) (*SessionDestroyRsp, error)
	SessionSet(context.Context, *SessionSetReq) (*SessionSetRsp, error)
	SessionGet(context.Context, *SessionGetReq) (*SessionGetRsp, error)
	SessionDeleteKey(context.Context, *SessionDeleteKeyReq) (*SessionDeleteKeyRsp, error)
}

// UnimplementedRaftServer can be embedded to have forward compatible implementations.
type UnimplementedRaftServer struct {
}

func (*UnimplementedRaftServer) SessionInit(ctx context.Context, req *RequestWithSID) (*SessionInitRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionInit not implemented")
}
func (*UnimplementedRaftServer) SessionDestroy(ctx context.Context, req *RequestWithSID) (*SessionDestroyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionDestroy not implemented")
}
func (*UnimplementedRaftServer) SessionSet(ctx context.Context, req *SessionSetReq) (*SessionSetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionSet not implemented")
}
func (*UnimplementedRaftServer) SessionGet(ctx context.Context, req *SessionGetReq) (*SessionGetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionGet not implemented")
}
func (*UnimplementedRaftServer) SessionDeleteKey(ctx context.Context, req *SessionDeleteKeyReq) (*SessionDeleteKeyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionDeleteKey not implemented")
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_SessionInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithSID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).SessionInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Raft/SessionInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).SessionInit(ctx, req.(*RequestWithSID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_SessionDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithSID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).SessionDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Raft/SessionDestroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).SessionDestroy(ctx, req.(*RequestWithSID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_SessionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).SessionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Raft/SessionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).SessionSet(ctx, req.(*SessionSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_SessionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).SessionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Raft/SessionGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).SessionGet(ctx, req.(*SessionGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_SessionDeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionDeleteKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).SessionDeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Raft/SessionDeleteKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).SessionDeleteKey(ctx, req.(*SessionDeleteKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessionInit",
			Handler:    _Raft_SessionInit_Handler,
		},
		{
			MethodName: "SessionDestroy",
			Handler:    _Raft_SessionDestroy_Handler,
		},
		{
			MethodName: "SessionSet",
			Handler:    _Raft_SessionSet_Handler,
		},
		{
			MethodName: "SessionGet",
			Handler:    _Raft_SessionGet_Handler,
		},
		{
			MethodName: "SessionDeleteKey",
			Handler:    _Raft_SessionDeleteKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raftcluster_auth.proto",
}
